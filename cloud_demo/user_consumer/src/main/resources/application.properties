server.port=8082
#EurekaServer地址,多个用逗号隔开
eureka.client.service-url.defaultZone=http://127.0.0.1:8083/eureka
# 当调用getHostname获取实例的hostname时，返回ip而不是host名称
eureka.instance.prefer-ip-address=true
# 指定自己的ip信息，不指定的话会自己寻找
eureka.instance.ip-address=127.0.0.1
spring.application.name=@artifactId@
#告诉Eureka在超过5秒内没有进行心跳续约,就认为该实例已经失效(默认值90)
eureka.instance.lease-expiration-duration-in-seconds=5
#每隔1秒对Eureka发送请求,进行心跳续约(默认是30)
eureka.instance.lease-renewal-interval-in-seconds=1
#从Eureka服务的列表只读备份，然后缓存在本地
eureka.client.fetch-registry=true
#每隔十秒就去拉一次服务列表
eureka.client.registry-fetch-interval-seconds=10
#随机策略
#user-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule
#轮询策略
user-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RoundRobinRule
#选择一个最小的并发请求的server
#user-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.BestAvailableRule
#过滤掉那些因为一直连接失败的被标记为circuit
#user-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.AvailabilityFilteringRule
#根据相应时间分配一个weight，相应时间越长，weight越小，被选中的可能性越低（权重）
#user-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.WeightedResponseTimeRule
#对选定的负载均衡策略机上重试机制。
#user-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RetryRule
#开启Spring Cloud的重试功能
spring.cloud.loadbalancer.retry.enabled=true
# Ribbon的连接超时时间
user-service.ribbon.ConnectTimeout=250
# Ribbon的数据读取超时时间
user-service.ribbon.ReadTimeout=1000
#是否对所有操作都进行重试
user-service.ribbon.OkToRetryOnAllOperations=true
# 切换实例的重试次数
user-service.ribbon.MaxAutoRetriesNextServer=1
#对当前实例的重试次数
user-service.ribbon.MaxAutoRetries=1
#熔断触发时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=6000



